.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "cclive 1"
.TH cclive 1 "2012-12-12" "v0.7.11" "cclive manual"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
cclive \- media download tool
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
cclive [\s-1OPTIONS\s0] [\s-1URL\s0 | \s-1FILE\s0 ...]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
cclive is a tool for downloading media from YouTube and similar
websites. It has a low memory footprint compared to other existing
tools.
.SH "INPUT"
.IX Header "INPUT"
Unless an argument is specified on the command line, cclive reads from
the stdin. The command line arguments may be either URLs or files to read.
.PP
If cclive reads from either stdin or files, it expects each \s-1URL\s0 to be
separated by a newline or a whitespace character.
.SH "OPTIONS \- COMMAND LINE"
.IX Header "OPTIONS - COMMAND LINE"
These options may be specified on the command line only.
See also \*(L"\s-1OPTIONS\s0 \- \s-1CONFIGURATION\s0\*(R".
.SS "\-\-version"
.IX Subsection "--version"
Print version and exit.
.SS "\-\-help"
.IX Subsection "--help"
Print help and exit.
.SS "\-\-license"
.IX Subsection "--license"
Print license and exit.
.SS "\-\-support"
.IX Subsection "--support"
Print supported hosts and exit.
.SS "\-\-verbose\-libcurl"
.IX Subsection "--verbose-libcurl"
Turn on libcurl verbose output.
.SS "\-q, \-\-quiet"
.IX Subsection "-q, --quiet"
Turn off all output to stdout and stderr with the exception of
\&\f(CW\*(C`\-\-verbose\-libcurl\*(C'\fR, if enabled, libcurl will continue to print
messages to stderr.
.SS "\-b, \-\-background"
.IX Subsection "-b, --background"
Go to background after startup. Output will be written to
the file specified with \f(CW\*(C`\-\-log\-file\*(C'\fR.
.SS "\-F, \-\-query\-formats"
.IX Subsection "-F, --query-formats"
Query available formats to the \s-1URL\s0. The returned array is created
from the data returned by the server. You can use the
\&\fIformat strings\fR in this array with \f(CW\*(C`\-\-format\*(C'\fR.
.PP
The available formats are determined by the \fIlibquvi script\fR
responsible for parsing the media details.
.PP
See also \*(L"\s-1EXAMPLES\s0\*(R", \f(CW\*(C`\-\-format\*(C'\fR and \f(CW\*(C`\-\-prefer\-format\*(C'\fR.
.SS "\-f, \-\-format \fIarg\fP (=default)"
.IX Subsection "-f, --format arg (=default)"
Download the format \fIarg\fR of the media. The \fIarg\fR may also be \f(CW\*(C`default\*(C'\fR,
\&\f(CW\*(C`best\*(C'\fR, \f(CW\*(C`help\*(C'\fR or \f(CW\*(C`list\*(C'\fR. Note, however, that the \f(CW\*(C`list\*(C'\fR and the \f(CW\*(C`help\*(C'\fR
are \fIdeprecated\fR and will be removed in the later versions of cclive.
The \fIarg\fR value is used with \fBall\fR of the URLs fed to cclive.
.PP
If the \fIarg\fR is \f(CW\*(C`best\*(C'\fR, the \fIlibquvi script\fR responsible for parsing
the media details will determine the \f(CW\*(C`best\*(C'\fR format available to an \s-1URL\s0.
.PP
If the \fIarg\fR is \f(CW\*(C`default\*(C'\fR the \fIlibquvi script\fR attempts to return an
\&\s-1URL\s0 to whatever it deemed to be the \f(CW\*(C`default\*(C'\fR format for the \s-1URL\s0.
.PP
The \fIlibquvi script\fR will return the \f(CW\*(C`default\*(C'\fR format if the \fIarg\fR
was unrecognized or the requested format was not available.
.PP
You can find more information about the YouTube specific \*(L"fmt\*(R" IDs at:
 <http://en.wikipedia.org/wiki/YouTube#Quality_and_codecs>
.PP
See also \*(L"\s-1EXAMPLES\s0\*(R", \f(CW\*(C`\-\-query\-formats\*(C'\fR and \f(CW\*(C`\-\-prefer\-format\*(C'\fR.
.SS "\-c, \-\-continue"
.IX Subsection "-c, --continue"
Resume partially downloaded media.
.SS "\-W, \-\-overwrite"
.IX Subsection "-W, --overwrite"
Overwrite existing media.
.SS "\-O, \-\-output\-file \fIarg\fP"
.IX Subsection "-O, --output-file arg"
Write media to \fIarg\fR. Overrides \f(CW\*(C`\-\-filename\-format\*(C'\fR.
.SS "\-n, \-\-no\-download"
.IX Subsection "-n, --no-download"
Do not download the media, print details only.
.SS "\-r, \-\-no\-resolve"
.IX Subsection "-r, --no-resolve"
Do not resolve \s-1URL\s0 redirections. If enabled, breaks the compatibility
with most \*(L"shortened\*(R" URLs.
.SS "\-\-no\-proxy"
.IX Subsection "--no-proxy"
Disable use of \s-1HTTP\s0 proxy. Overrides both \f(CW\*(C`\-\-proxy\*(C'\fR and http_proxy environment
settings.
.SS "\-\-log\-file \fIarg\fP (=cclive_log)"
.IX Subsection "--log-file arg (=cclive_log)"
Write log output to \fIarg\fR. Ignored unless used with \f(CW\*(C`\-\-background\*(C'\fR.
Overwrites the existing \fIarg\fR file (if any). See also \f(CW\*(C`\-\-background\*(C'\fR
and \f(CW\*(C`\-\-update\-interval\*(C'\fR.
.SS "\-\-config\-file \fIarg\fP (=~/.ccliverc)"
.IX Subsection "--config-file arg (=~/.ccliverc)"
Path to a file to read cclive arguments from.
.SH "OPTIONS \- CONFIGURATION"
.IX Header "OPTIONS - CONFIGURATION"
The following options may be specified on the command line and read
from a configuration file. Any such option specified on the command
line will override the value read from the configuration file.
See also \*(L"\s-1FILES\s0\*(R" and \f(CW\*(C`\-\-config\-file\*(C'\fR.
.SS "\-p, \-\-prefer\-format \fIarg\fP"
.IX Subsection "-p, --prefer-format arg"
Download the \fIspecified\fR format of the media when the pattern matches
to the media page \s-1URL\s0.
.PP
\&\fIarg\fR is a \fBstring pair\fR of \fIpattern\fR (regular expression) and
\&\fIformat\fR. The character ':' is expected to separate these two
strings, e.g. \f(CW\*(C`pattern:format\*(C'\fR.
.PP
\&\f(CW\*(C`\-\-format\*(C'\fR overrides \f(CW\*(C`\-\-prefer\-format\*(C'\fR. cclive accepts multiple
occurrences of \f(CW\*(C`\-\-prefer\-format\*(C'\fR.
.PP
See also \*(L"\s-1EXAMPLES\s0\*(R", \f(CW\*(C`\-\-query\-formats\*(C'\fR and \f(CW\*(C`\-\-format\*(C'\fR.
.SS "\-\-progressbar \fIarg\fP (=normal)"
.IX Subsection "--progressbar arg (=normal)"
Use the progressbar of type \fIarg\fR. Ignored with \f(CW\*(C`\-\-background\*(C'\fR which
will always use the \f(CW\*(C`dotline\*(C'\fR type. Possible values:
.PP
.Vb 3
\& normal  (default)
\& dotline (implied by \-\-background)
\& simple  (basic)
.Ve
.SS "\-\-update\-interval \fIarg\fP (=1)"
.IX Subsection "--update-interval arg (=1)"
Specify \fIarg\fR progressbar update interval in seconds. Use of decimal
fractions, e.g. \*(L"0.2\*(R" or \*(L"1.99\*(R", is acceptable.
.ie n .SS "\-\-filename\-format \fIarg\fP (=""%t.%s"")"
.el .SS "\-\-filename\-format \fIarg\fP (=``%t.%s'')"
.IX Subsection "--filename-format arg (=%t.%s)"
How the downloaded media file should be named.  Each occurence of the
following specifiers will be replaced in the \fIarg\fR:
.PP
.Vb 4
\& %t .. Media title
\& %i .. Media ID
\& %h .. Media host ID (e.g. "vimeo")
\& %s .. Media file suffix (e.g. "flv")
.Ve
.PP
See also \f(CW\*(C`\-\-tr\*(C'\fR.
.SS "\-\-output\-dir \fIarg\fP"
.IX Subsection "--output-dir arg"
Write downloaded media to \fIarg\fR directory.
.SS "\-t, \-\-tr \fIarg\fP"
.IX Subsection "-t, --tr arg"
Where \fIarg\fR is a pattern (regular expression). \f(CW\*(C`\-\-tr\*(C'\fR can be used to
translate the characters in the media titles before they are used in
the filenames of the downloaded media. Default is \f(CW\*(C`/(\ew|\es)/g\*(C'\fR.
.PP
cclive accepts multiple occurrences of \f(CW\*(C`\-\-tr\*(C'\fR. See also \*(L"\s-1EXAMPLES\s0\*(R".
.SS "\-\-exec \fIarg\fP"
.IX Subsection "--exec arg"
Invoke \fIarg\fR after each successfully finished download. Each occurence
of the following specifiers will be replaced in the \fIarg\fR:
.PP
.Vb 3
\& %f .. Full path to the downloaded media file
\& %n .. Name of the downloaded media file
\& %t .. Media title (unfiltered)
.Ve
.PP
The \fIarg\fR is also invoked if the media is fully retrieved already.
cclive accepts multiple occurrences of \f(CW\*(C`\-\-exec\*(C'\fR. See also \*(L"\s-1EXAMPLES\s0\*(R".
.ie n .SS "\-\-agent \fIarg\fP (=""Mozilla/5.0"")"
.el .SS "\-\-agent \fIarg\fP (=``Mozilla/5.0'')"
.IX Subsection "--agent arg (=Mozilla/5.0)"
Identify cclive as \fIarg\fR to the \s-1HTTP\s0 servers.
.SS "\-\-proxy \fIarg\fP"
.IX Subsection "--proxy arg"
Use \fIarg\fR for \s-1HTTP\s0 proxy, e.g. \*(L"http://foo:1234\*(R". Overrides
http_proxy environment setting.
.SS "\-\-throttle \fIarg\fP (=0, disabled)"
.IX Subsection "--throttle arg (=0, disabled)"
Do not exceed the transfer rate \fIarg\fR KB/s.
.SS "\-\-connect\-timeout \fIarg\fP (=30)"
.IX Subsection "--connect-timeout arg (=30)"
This option wraps the \s-1CURLOPT_CONNECTTIMEOUT\s0 (libcurl):
.PP
"Pass a long. It should contain the maximum time in seconds that
you allow the connection to the server to take.
.PP
This only limits the connection phase, once it has connected,
this option is of no more use. Set to zero to disable connection
timeout (it will then only timeout on the system's internal
timeouts). See also the \s-1CURLOPT_TIMEOUT\s0 option."
\&\*(-- \fIcurl_easy_setopt\fR\|(3)
.SS "\-\-transfer\-timeout \fIarg\fP (=0, disabled)"
.IX Subsection "--transfer-timeout arg (=0, disabled)"
This option wraps the \s-1CURLOPT_TIMEOUT\s0 (libcurl):
.PP
"Pass a long as parameter containing the maximum time in seconds
that you allow the libcurl transfer operation to take.
.PP
Normally, name lookups can take a considerable time and limiting
operations to less than a few minutes risk aborting perfectly
normal operations. This option will cause curl to use the
\&\s-1SIGALRM\s0 to enable time-outing system calls."
\&\*(-- \fIcurl_easy_setopt\fR\|(3)
.SS "\-\-dns\-cache\-timeout \fIarg\fP (=60)"
.IX Subsection "--dns-cache-timeout arg (=60)"
This option wraps the \s-1CURLOPT_DNS_CACHE_TIMEOUT\s0 (libcurl):
.PP
"Pass a long, this sets the timeout in seconds. Name resolves will
be kept in memory for this number of seconds. Set to zero to
completely disable caching, or set to \-1 to make the cached
entries remain forever. By default, libcurl caches this info
for 60 seconds.
.PP
The name resolve functions of various libc implementations don't
re-read name server information unless explicitly told so
(for example, by calling \fIres_init\fR\|(3)). This may cause libcurl
to keep using the older server even if \s-1DHCP\s0 has updated the
server info, and this may look like a \s-1DNS\s0 cache issue to the
casual libcurl-app user." \*(-- \fIcurl_easy_setopt\fR\|(3)
.SS "\-\-max\-retries \fIarg\fP (=5, 0=disabled)"
.IX Subsection "--max-retries arg (=5, 0=disabled)"
Retry downloading \fIarg\fR times before giving up.
.SS "\-\-retry\-wait \fIarg\fP (=5)"
.IX Subsection "--retry-wait arg (=5)"
Wait \fIarg\fR seconds before retrying after a failed attempt.
.SH "DEPRECATED"
.IX Header "DEPRECATED"
These options are deprecated and will be removed in the later versions
of cclive.
.ie n .SS "\-\-regexp \fIarg\fP (=""/(\ew|\es)/g"")"
.el .SS "\-\-regexp \fIarg\fP (=``/(\ew|\es)/g'')"
.IX Subsection "--regexp arg (=/(w|s)/g)"
Regular expression \fIarg\fR to cleanup the media title before it
is used in the filename. Supports \*(L"i\*(R" (case-insensitive) and \*(L"g\*(R"
(global or \*(L"find all\*(R").
.PP
Use \f(CW\*(C`\-\-tr\*(C'\fR instead.
.SS "\-\-subst \fIarg\fP ..."
.IX Subsection "--subst arg ..."
Replace matched occurences in the media filename after applying
\&\f(CW\*(C`\-\-filename\-format\*(C'\fR and \f(CW\*(C`\-\-regexp\*(C'\fR. To use multiple substitutions,
separate each expression in \fIarg\fR with a whitespace. Supports \*(L"i\*(R"
(case-insensitive) and \*(L"g\*(R" (global or \*(L"find all\*(R").
.PP
\fISupported delimiters\fR
.IX Subsection "Supported delimiters"
.PP
.Vb 1
\& <> {} () /
.Ve
.PP
\fINote\fR
.IX Subsection "Note"
.PP
.Vb 2
\& s/old/new/  .. Invalid
\& s/old//new/ .. OK
.Ve
.PP
Use \f(CW\*(C`\-\-tr\*(C'\fR instead.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Always quote the URLs on the command line as seen below. Many URLs
contain parameters that may otherwise cause the shell to behave
with unexpected results.
.ie n .SS "cclive ""\s-1URL\s0"""
.el .SS "cclive ``\s-1URL\s0''"
.IX Subsection "cclive URL"
Typical use.
.ie n .SS "cclive \-F ""\s-1URL\s0"""
.el .SS "cclive \-F ``\s-1URL\s0''"
.IX Subsection "cclive -F URL"
Query available formats to the \s-1URL\s0. You can then use one of the
format strings from the returned array with \f(CW\*(C`\-\-format\*(C'\fR.
.ie n .SS "cclive \-f best ""\s-1URL\s0"""
.el .SS "cclive \-f best ``\s-1URL\s0''"
.IX Subsection "cclive -f best URL"
Download the best available format of the media.
.ie n .SS "cclive \-p ""^.*youtube.*\e.com:fmt43_360p"" ""\s-1YOUTUBE_URL\s0"""
.el .SS "cclive \-p ``^.*youtube.*\e.com:fmt43_360p'' ``\s-1YOUTUBE_URL\s0''"
.IX Subsection "cclive -p ^.*youtube.*.com:fmt43_360p YOUTUBE_URL"
Get the fmt43_360p format of YouTube videos whenever possible.
.ie n .SS "cclive \-n ""\s-1URL\s0"""
.el .SS "cclive \-n ``\s-1URL\s0''"
.IX Subsection "cclive -n URL"
Do not download the media, print the details only.
.ie n .SS "cclive ""\s-1URL\s0"" \-t 's/foo/bar/g'"
.el .SS "cclive ``\s-1URL\s0'' \-t 's/foo/bar/g'"
.IX Subsection "cclive URL -t 's/foo/bar/g'"
Replace any \*(L"foo\*(R" substrings with \*(L"bar\*(R" in the media title before
using it in the output filename.
.ie n .SS "cclive ""\s-1URL\s0"" \-b \-\-log\-file foo.log"
.el .SS "cclive ``\s-1URL\s0'' \-b \-\-log\-file foo.log"
.IX Subsection "cclive URL -b --log-file foo.log"
Go to background, redirect output to \f(CW\*(C`foo.log\*(C'\fR.
.SS "pkill \-USR1 cclive"
.IX Subsection "pkill -USR1 cclive"
Interrupt the current download of all matching cclive processes. Causes
cclive to move onto the next \s-1URL\s0 in the queue, if any.
.ie n .SS "cclive ""\s-1URL\s0"" \-\-exec 'echo ""%f""' \-\-exec 'vlc ""%f""'"
.el .SS "cclive ``\s-1URL\s0'' \-\-exec 'echo ``%f''' \-\-exec 'vlc ``%f'''"
.IX Subsection "cclive URL --exec 'echo %f' --exec 'vlc %f'"
Print path to the downloaded media file using \fIecho\fR\|(1), open the media
file in \fIvlc\fR\|(1).
.SS "More examples"
.IX Subsection "More examples"
You can find more examples in the project wiki, see \*(L"\s-1WWW\s0\*(R" for the
URLs.
.SH "FILES"
.IX Header "FILES"
.SS "~/.ccliverc"
.IX Subsection "~/.ccliverc"
This location is read by default. \f(CW\*(C`\-\-config\-file\*(C'\fR may be used to specify
a different location. See also \*(L"\s-1OPTIONS\s0 \- \s-1CONFIGURATION\s0\*(R".
.PP
\fIExample\fR
.IX Subsection "Example"
.PP
.Vb 7
\& filename\-format = %h_%i_(%t).%s
\& proxy = http://foo:1234
\& exec = /usr/bin/vlc %f
\& regexp = /(\ew|\epL)/g
\& progressbar = simple
\& prefer\-format = ^.*youtube.*\e.com:fmt43_360p
\& prefer\-format = dailym:best
.Ve
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
cclive exits with \s-1EXIT_SUCCESS\s0 (on \s-1POSIX\s0 systems this is 0) on success
and \s-1EXIT_FAILURE\s0 (on \s-1POSIX\s0 systems this is 1) if an error occurred.
.SH "DEBUGGING TIPS"
.IX Header "DEBUGGING TIPS"
.SS "\-\-verbose\-libcurl"
.IX Subsection "--verbose-libcurl"
Make libcurl verbose.
.SH "WWW"
.IX Header "WWW"
.Vb 2
\& Home  : http://cclive.sourceforge.net/
\& gitweb: http://repo.or.cz/w/cclive.git
.Ve
.SH "BACKGROUND"
.IX Header "BACKGROUND"
The name \*(L"clive\*(R" originates from the words \*(L"command line video extraction\*(R",
the prepending \*(L"c\*(R" refers to C or \*(C+. cclive is a rewrite of \fIclive\fR\|(1)
in \*(C+.
.SH "LICENSE"
.IX Header "LICENSE"
cclive is Free Software, licensed under the GPLv3+.
.SH "AUTHOR"
.IX Header "AUTHOR"
Toni Gundogdu <legatvs at sign gmail com>.
.PP
Thanks to all those who have contributed to the project by sending
patches, reporting bugs and writing feedback. You know who you are.
